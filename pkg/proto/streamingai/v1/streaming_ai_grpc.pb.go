// streaming_ai.proto
// Protocol Buffers definition for Realtime AI gRPC service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.9
// source: pkg/proto/streamingai/v1/streaming_ai.proto

package streamingaiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamingAIService_BiDirectionalStreaming_FullMethodName = "/streamingai.v1.StreamingAIService/BiDirectionalStreaming"
	StreamingAIService_CreateSession_FullMethodName          = "/streamingai.v1.StreamingAIService/CreateSession"
	StreamingAIService_CloseSession_FullMethodName           = "/streamingai.v1.StreamingAIService/CloseSession"
)

// StreamingAIServiceClient is the client API for StreamingAIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingAIServiceClient interface {
	// BiDirectionalStreaming: Bidirectional streaming RPC for real-time audio/video/text exchange
	BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error)
	// Optional: Separate session management
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
}

type streamingAIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingAIServiceClient(cc grpc.ClientConnInterface) StreamingAIServiceClient {
	return &streamingAIServiceClient{cc}
}

func (c *streamingAIServiceClient) BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamingAIService_ServiceDesc.Streams[0], StreamingAIService_BiDirectionalStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessage, StreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamingAIService_BiDirectionalStreamingClient = grpc.BidiStreamingClient[StreamMessage, StreamMessage]

func (c *streamingAIServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, StreamingAIService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingAIServiceClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, StreamingAIService_CloseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamingAIServiceServer is the server API for StreamingAIService service.
// All implementations must embed UnimplementedStreamingAIServiceServer
// for forward compatibility.
type StreamingAIServiceServer interface {
	// BiDirectionalStreaming: Bidirectional streaming RPC for real-time audio/video/text exchange
	BiDirectionalStreaming(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error
	// Optional: Separate session management
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	mustEmbedUnimplementedStreamingAIServiceServer()
}

// UnimplementedStreamingAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamingAIServiceServer struct{}

func (UnimplementedStreamingAIServiceServer) BiDirectionalStreaming(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method BiDirectionalStreaming not implemented")
}
func (UnimplementedStreamingAIServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedStreamingAIServiceServer) CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedStreamingAIServiceServer) mustEmbedUnimplementedStreamingAIServiceServer() {}
func (UnimplementedStreamingAIServiceServer) testEmbeddedByValue()                            {}

// UnsafeStreamingAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingAIServiceServer will
// result in compilation errors.
type UnsafeStreamingAIServiceServer interface {
	mustEmbedUnimplementedStreamingAIServiceServer()
}

func RegisterStreamingAIServiceServer(s grpc.ServiceRegistrar, srv StreamingAIServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamingAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamingAIService_ServiceDesc, srv)
}

func _StreamingAIService_BiDirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingAIServiceServer).BiDirectionalStreaming(&grpc.GenericServerStream[StreamMessage, StreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamingAIService_BiDirectionalStreamingServer = grpc.BidiStreamingServer[StreamMessage, StreamMessage]

func _StreamingAIService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingAIServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingAIService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingAIServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingAIService_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingAIServiceServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingAIService_CloseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingAIServiceServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamingAIService_ServiceDesc is the grpc.ServiceDesc for StreamingAIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingAIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamingai.v1.StreamingAIService",
	HandlerType: (*StreamingAIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _StreamingAIService_CreateSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _StreamingAIService_CloseSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BiDirectionalStreaming",
			Handler:       _StreamingAIService_BiDirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/streamingai/v1/streaming_ai.proto",
}
