name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Cache FFmpeg
      id: cache-ffmpeg
      uses: actions/cache@v4
      with:
        path: ~/ffmpeg
        key: ffmpeg-6.1-${{ runner.os }}

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          yasm \
          libopus-dev \
          libopusfile-dev \
          libx264-dev \
          libx265-dev \
          libvpx-dev \
          libmp3lame-dev

    - name: Build and install FFmpeg from source
      if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
      run: |
        cd ~
        wget -q https://ffmpeg.org/releases/ffmpeg-6.1.tar.xz
        tar xf ffmpeg-6.1.tar.xz
        cd ffmpeg-6.1
        ./configure \
          --prefix=$HOME/ffmpeg \
          --enable-gpl \
          --enable-libopus \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libvpx \
          --enable-libmp3lame \
          --enable-shared \
          --disable-static
        make -j$(nproc)
        make install

    - name: Set FFmpeg environment variables
      run: |
        echo "PKG_CONFIG_PATH=$HOME/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/ffmpeg/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "$HOME/ffmpeg/bin" >> $GITHUB_PATH

    - name: Download Go modules
      run: go mod download

    - name: Verify Go modules
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Cache FFmpeg
      id: cache-ffmpeg
      uses: actions/cache@v4
      with:
        path: ~/ffmpeg
        key: ffmpeg-6.1-${{ runner.os }}

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          yasm \
          libopus-dev \
          libopusfile-dev \
          libx264-dev \
          libx265-dev \
          libvpx-dev \
          libmp3lame-dev

    - name: Build and install FFmpeg from source
      if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
      run: |
        cd ~
        wget -q https://ffmpeg.org/releases/ffmpeg-6.1.tar.xz
        tar xf ffmpeg-6.1.tar.xz
        cd ffmpeg-6.1
        ./configure \
          --prefix=$HOME/ffmpeg \
          --enable-gpl \
          --enable-libopus \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libvpx \
          --enable-libmp3lame \
          --enable-shared \
          --disable-static
        make -j$(nproc)
        make install

    - name: Set FFmpeg environment variables
      run: |
        echo "PKG_CONFIG_PATH=$HOME/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/ffmpeg/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "$HOME/ffmpeg/bin" >> $GITHUB_PATH

    - name: Download Go modules
      run: go mod download

    - name: Build examples
      run: |
        go build -v ./examples/gemini-assis
        go build -v ./examples/local-assis

    - name: Build packages
      run: |
        go build -v ./pkg/pipeline
        go build -v ./pkg/connection
        go build -v ./pkg/server
        go build -v ./pkg/audio
        go build -v ./pkg/tokenizer
